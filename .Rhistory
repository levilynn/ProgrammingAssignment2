age <- c(1,3,5,2,11,9,3,9,12,3)
weight <- c(4.4,5.3,7.2,5.2,8.5,7.3,6.0,10.4,10.2,6.1)
mean(weight)
sd(weight)
cor(age,weight)
plot(age,weight)
q()
demo()
demo(graphics)
getwd()
ls()
options
options(digits)
options(digits=4)
x<-runif(20)
x<-runif(20)
hist(x)
summary(x)
savehistory()
save.image()
q(0)
install.packages("vcd")
help.start()
library("vcd")
library(vcd)
help(Arthritis)
Arthritis
example(Arthritis)
?str
mydata<-data.frame{age=numeric(0),gender=character(0)}
mydata<-data.frame(age=numeric(0),gender=character(0))
mydata<-edit(mydata)
mydata
colors()
gray(0:10/10)
rainbow(10)
n <- 10
mycolors <- rainbow(n)
pie(rep(1,n), labels=mycolors, col=mycolors)
?rep
dose  <- c(20, 30, 40, 45, 60)
drugA <- c(16, 20, 27, 40, 60)
drugB <- c(15, 18, 25, 31, 40)
plot(dose, drugA, type="b")
par(lty=2, pch=17)          # change line type and symbol
plot(dose, drugA, type="b") # generate a plot
par(opar)                   # restore the original settings
par(pin=c(2,3))
par(lwd=2, cex=1.5)
par(	cex.axis=.75, font.axis=3)
plot(dose, drugA, type="b", pch=19, lty=2, col="red")
plot(dose, drugB, type="b", pch=23, lty=6, col="blue", bg="green")
par(opar)
ï¼Ÿplot
?plot
?mtext
x <- c(1:10)
y <- x
z <- 10/x
opar<-par(no.readonly=TRUE)
par(mar=c(5, 4, 4, 8) + 0.1)
plot(x, y,type="b",
pch=21, col="red",
yaxt="n", lty=3, xlab="", ylab="")
lines(x, z, type="b",
pch=22, col="blue", lty=2)
axis(2, at=x,labels=x, col.axis="red", las=0)
axis(4, at=z,labels=round(z,digits=2),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
mtext("y=10/x", side=4, line=3, cex.lab=1,las=2, col="blue")
title("An Example of Creative Axes",
xlab="X values",
ylab="Y=X")
par(opar)
par(lwd=2, cex=1.5, font.lab=2)
plot(dose, drugA, type="b",
pch=15, lty=1, col="red", ylim=c(0, 60),
main="Drug A vs. Drug B",
xlab="Drug Dosage", ylab="Drug Response")
lines(dose, drugB, type="b",
pch=17, lty=2, col="blue")
abline(h=c(30), lwd=1.5, lty=2, col="grey")
library(Hmisc)
minor.tick(nx=3, ny=3, tick.ratio=0.5)
legend("topleft", inset=.05, title="Drug Type", c("A","B"),
lty=c(1,2), pch=c(15, 17), col=c("red", "blue"))
par(opar)
install.packages("Hmisc")
par(lwd=2, cex=1.5, font.lab=2)
plot(dose, drugA, type="b",
pch=15, lty=1, col="red", ylim=c(0, 60),
main="Drug A vs. Drug B",
xlab="Drug Dosage", ylab="Drug Response")
lines(dose, drugB, type="b",
pch=17, lty=2, col="blue")
abline(h=c(30), lwd=1.5, lty=2, col="grey")
library(Hmisc)
minor.tick(nx=3, ny=3, tick.ratio=0.5)
legend("topleft", inset=.05, title="Drug Type", c("A","B"),
lty=c(1,2), pch=c(15, 17), col=c("red", "blue"))
par(opar)
?factor
?legend
?length
getwd()
dir()
help.start(0)
help.start()
library(vcd)
install.packages("vcd")
library(grid)
ls()
help(vcd)
help(packages="vcd")
library(vcd)
help(packages="vcd")
help(package="vcd")
person(given = "Florian", family = "Gerber", role = c("ctb"))
update()
update.packages()
update.packages()
help(Arthritis)
help(Arthritis)
library(grid)
help(package="Arthritis")
help(Arthritis)
help(Arthritis)
library(grid)
library(vcd)
help(Arthritis)
example(Arthritis)
library()
libPath()
libPaths()
libPaths()
signif(1,digits=3)
signif(100,digits=3)
signif(001,digits=3)
mad(c(1,2,3,4))
?mad
mad(c(1,2,3,4),constant=3)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x * y
}
f(3)
apply(array(rnorm(2*2*10),c(2,2,10),c(1,2),mean)
)
apply(array(rnorm(2*2*10),c(2,2,10)),c(1,2),mean)
array(rnorm(2*2*10)
)
x<-array(rnorm(2*2*10))
x[1,2]
x[1,2,10]
x
x[1]
x[1,2,]
x[1,2,2]
x<-array(rnorm(2*2*10),2*2*10)
x
x[2,2,10]
x[40]
x(2,2,10)
x<-array(rnorm(2*2*10),c(2,2,10))
x
x[1,2,10]
str(mean)
str(mapply)
str(range)
str(range())
str(max)
?gl
?gl
rm(all)
str(tapply)
x<-rnorm(10)
x
f1<-g(2,5)
f1<-gl(2,5)
f1
f1<-gl(5,2)
f1<-gl(2,5)
f2<-gl(5,2)
list(f1,f2)
?split
x<-5
class(x)
library(datasets)
data(iris)
# In this dataset, what is the mean of 'Sepal.Length' for the species virginica? (Please only enter the numeric result and nothing else.)
class(iris)
head(iris)
sapply(iris,mean,iris$Species="Virginica")
str(sapply)
sapply(iris,mean,which(iris$Species="Virginica"))
sapply(iris,mean,na.omit()=TRUE)
sapply(iris,mean,na.omitTRUE)
sapply(iris,mean,na.omit=TRUE)
str(tapply)
tapply(iris,Species,mean,na.omit=TRUE)
tapply(iris,iris$Species,mean,na.omit=TRUE)
str(lapply)
tapply(iris,iris$Species,mean,na.omit=TRUE)
tapply(iris,level(iris$Species),mean,na.omit=TRUE)
?level
?levels()
levels(iris$Species)
tapply(iris,levels(iris$Species),mean,na.omit=TRUE)
mean(levels[which(iris$Species=virginica),])
mean(levels[which(iris$Species=virginica),]
mean(levels[inwhich(iris$Species=virginica),])
mean(iris[which(iris$Species=virginica),])
mean(iris[which(iris$Species="virginica"),])
iris[which(iris$Species="virginica"),]
iris[which(iris$Species="virginica"),]
iris
head(iris)
iris[,which(iris$Species="virginica")]
iris[which(iris$Species="virginica")]
iris[which(iris$Species="virginica"),]
iris[which(iris$Species=="virginica"),]
mean(iris[which(iris$Species=="virginica"),])
ColMean(iris[which(iris$Species=="virginica"),])
colMeans(iris[which(iris$Species=="virginica"),])
colMeans(iris[which(iris$Species=="virginica"),],c(1:4))
colMeans(iris[which(iris$Species=="virginica"),])
mean(iris[which(iris$Species=="virginica"),])
sapply(iris[which(iris$Species=="virginica"),],mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
levels(iris$Species)
sapply(iris[which(iris$Species=="versicolor"),],mean)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
with(mtcars, tapply(horsepower, cyl, mean))
head(mtcars)
with(mtcars, tapply(hp, cyl, mean))
sapply(mtcars[which(mtcars$cyl==8)],mean,mtcars$hp))
sapply(mtcars[which(mtcars$cyl==8),"hp"],mean)
mtcars[which(mtcars$cyl==8),"hp"]
sapply(mtcars[which(mtcars$cyl==8),"hp"],colMeans)
sapply(mtcars[which(mtcars$cyl==8),"hp"],rowMeans)
?sapply
mean(mtcars[which(mtcars$cyl==8),"hp"]
)
mean(mtcars[which(mtcars$cyl==8),"hp"])-mean(mtcars[which(mtcars$cyl==4),"hp"])
debug(ls)
ls
ls()
2
2
3
4
5
ls()
cancle
5
6
0
q()
x
help
eidt
finish
help
quit
help
q()
x
x<-matrix(x,c(4,5)
)
x
slove(x)
?solve
solve(x)
x<-matrix(rnorm(4),c(2,2)))
x<-matrix(rnorm(4),c(2,2))
x
solve(x)
x*solve(x)
solve(solve(x))
x%*%solve(x)
rm
str(rm)
?rm
??clear
?? clear screen
??screen
erase.screen
source("cachematrix.R")
setwd("D:/Git/datasciencecoursera/ProgrammingAssignment2")
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
x
cacheSolve(x)
class(x)
x
s<-x
cacheSolve(s)
makeCacheMatrix(x)
y<-makeCacheMatrix(x)
y
inverse<-solve(x)
x$getinverse()
makeCacheMatrix(x)
x
data
x$get()
x
source("cachematrix")
source("cachematrix.R")
x
a<-x
rm(x)
ay<-cacheSolve(a)
ay<-cacheSolve(a)
soucrce("cachemean")
soucrce("cachemean.R")
source("cachemean.R")
cachemean(x)
cachemean(c(4,8))
cachemean(1:4
)
cachemean(4)
makeVector(c(3,4))
cachemean(x)
cachemean(makeVector(c(3,4)))
source("cachematrix.R")
cacheSolve(makeCacheMatrix(x)))
cacheSolve(makeCacheMatrix(a)))
cacheSolve(makeCacheMatrix(a))
x<-cacheSolve(makeCacheMatrix(a))
x<-cacheSolve(makeCacheMatrix(x))
x<-cacheSolve(makeCacheMatrix(a))
y<-cacheSolve(makeCacheMatrix(x))
y
source("cachematrix.R")
x<-cacheSolve(makeCacheMatrix(a))
x
cacheSolve(makeCacheMatrix(x))
